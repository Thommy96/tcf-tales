//argments in brackets <> have to be replaced

//return character and character relation lists

//return list of relations sorted by frequency over all tales
//rel-freqs.csv
MATCH (r:Relation)
RETURN r.characters AS Characters, r.frequency AS CharacterFrequency
ORDER BY toInteger(r.frequency) DESC;

//return list of relations sorted by frequency for each tale
//rel-freqs-per-tale.csv
MATCH (t:Tale)<-[h:HAPPENS_IN]-(r:Relation)
RETURN t.title AS Tale, r.characters AS Characters, h.frequency AS TaleOccurrenceFrequency, r.frequency AS RelationFrequency
ORDER BY toInteger(split(t.id, "t")[1]) , toInteger(h.frequency) DESC;

//return list of relations sorted by frequecy for a specific tale (replace <tale_id>)
//rel-freqs-tale.csv
MATCH (t:Tale {id:"<tale_id>"})<-[h:HAPPENS_IN]-(r:Relation)
RETURN t.title AS Tale, r.characters AS Characters, h.frequency AS TaleOccurrenceFrequency, r.frequency AS RelationFrequency
ORDER BY toInteger(split(t.id, "t")[1]) , toInteger(h.frequency) DESC;

//return list of relations sorted by tale distribution frequency (in how many different tales the relation appears)
//rel-tale-distr.csv
MATCH (r:Relation)-[h:HAPPENS_IN]->(t:Tale)
RETURN r.characters AS Characters, COUNT(h) AS TaleDistributionFrequency
ORDER BY COUNT(h) DESC;

//return list of relations for a specific character sorted by relation frequency over all tales
//rel-char-König.csv
MATCH (c:Character {name:"<character>"})-[re:RELATION]->(r:Relation)
RETURN r.characters AS Characters, r.frequency AS RelationFrequency
ORDER BY toInteger(r.frequency) DESC;

//return list of relations for a specific character sorted by relation frequency for a specific tale
//rel-char-König-t0.csv
MATCH (c:Character {name:"<character>"})-[re:RELATION]->(r:Relation)-[h:HAPPENS_IN]->(t:Tale {id:"<tale_id>"})
RETURN r.characters AS Characters, h.frequency AS TaleOccurrenceFrequency, r.frequency AS RelationFrequency, t.title AS Tale
ORDER BY toInteger(h.frequency) DESC;

--------------------------------------------------------

//return category and category relation lists

//return list of category relations sorted by frequency over all tales
//cat-freqs.csv
MATCH (kr:CategoryRelation)
RETURN kr.categories AS Categories, kr.frequency AS CategoryFrequency
ORDER BY toInteger(kr.frequency) DESC;

//return list of category relations sorted by frequency for each tale
//cat-freqs-per-tale.csv
MATCH (t:Tale)<-[h:HAPPENS_IN]-(kr:CategoryRelation)
RETURN t.title AS Tale, kr.categories AS Categories, h.frequency AS TaleOccurrenceFrequency, kr.frequency AS CategoryRelationFrequency
ORDER BY toInteger(split(t.id, "t")[1]) , toInteger(h.frequency) DESC;

//return list of category relations sorted by frequecy for a specific tale (replace <tale_id>)
//cat-freqs-tale.csv
MATCH (t:Tale {id:"<tale_id>"})<-[h:HAPPENS_IN]-(kr:CategoryRelation)
RETURN t.title AS Tale, kr.categories AS Categories, h.frequency AS TaleOccurrenceFrequency, kr.frequency AS CategoryRelationFrequency
ORDER BY toInteger(split(t.id, "t")[1]) , toInteger(h.frequency) DESC;

//return list of category relations sorted by tale distribution frequency (in how many different tales the category relation appears)
//cat-tale-distr.csv
MATCH (kr:CategoryRelation)-[h:HAPPENS_IN]->(t:Tale)
RETURN kr.categories AS Categories, COUNT(h) AS TaleDistributionFrequency
ORDER BY COUNT(h) DESC;

//return list of category relations for a specific category sorted by category relation frequency over all tales
//cat-rel-Adel.csv
MATCH (k:Category {name:"<category>"})-[re:RELATION]->(kr:CategoryRelation)
RETURN kr.categories AS Categories, kr.frequency AS CategoryRelationFrequency
ORDER BY toInteger(kr.frequency) DESC;

//return list of category relations for a specific category sorted by category relation frequency for a specific tale
//cat-rel-Adel-t0.csv
MATCH (k:Category {name:"<category>"})-[re:RELATION]->(kr:CategoryRelation)-[h:HAPPENS_IN]->(t:Tale {id:"<tale_id>"})
RETURN kr.categories AS Categories, h.frequency AS TaleOccurrenceFrequency, kr.frequency AS CategoryRelationFrequency, t.title AS Tale
ORDER BY toInteger(h.frequency) DESC;

-----------------------------------------------------------

//display nodes and edges for characters and relations

//display nodes for tale and relation for a specific tale where the relation appears more than once
MATCH (t:Tale {id:"<tale_id>"})<-[h:HAPPENS_IN]-(r:Relation)
WHERE toInteger(h.frequency) > 1
RETURN t, h, r;

//display a specific relation and the tales it appears in (more than once)
MATCH (t:Tale)<-[h:HAPPENS_IN]-(r:Relation {characters: "<character1>, <character2>"})
WHERE toInteger(h.frequency) > 1
RETURN t, h, r;

//display a specific character and all tales in which it appears more than once
MATCH (c:Character {name:"<character>"})-[a:APPEARS_IN]->(t:Tale)
WHERE toInteger(a.frequency) > 1
RETURN c, a, t;

//display all relations for a character (frequency > 1)
MATCH (c:Character {name:"<character>"})-[re:RELATION]->(r:Relation)<-[re2:RELATION]-(c2:Character)
WHERE toInteger(r.frequency) > 1
RETURN c, re, r, re2, c2;

//display all relations for a character in a specific tale
MATCH (c:Character {name:"<character>"})-[re:RELATION]->(r:Relation)-[h:HAPPENS_IN]->(t:Tale {id:"<tale_id>"})
RETURN re, r, t, h;

-------------------------------------------------------

//display nodes and edges for categories and category relations

//display nodes for tale and category relation for a specific tale where the category relation appears more than once
MATCH (t:Tale {id:"<tale_id>"})<-[h:HAPPENS_IN]-(kr:CategoryRelation)
WHERE toInteger(h.frequency) > 1
RETURN t, h, kr;

//display a specific category relation and the tales it appears in more than once
MATCH (t:Tale)<-[h:HAPPENS_IN]-(kr:CategoryRelation {categories: "<category1>, <category2>"})
WHERE toInteger(h.frequency) > 1
RETURN t, h, kr;

//display a specific category and all tales in which it appears more than once
MATCH (k:Category {name:"<category>"})-[a:APPEARS_IN]->(t:Tale)
WHERE toInteger(a.frequency) > 1
RETURN k, a, t;

//display all category relations for a category (category relation frequency > 1)
MATCH (k1:Category {name:"<category>"})-[re1:RELATION]->(kr:CategoryRelation)<-[re2:RELATION]-(k2:Category)
WHERE toInteger(kr.frequency) > 1
RETURN k1, re1, kr, re2, k2;

//display all category relations for a category in a specific tale
MATCH (k:Category {name:"<category>"})-[re:RELATION]->(kr:CategoryRelation)-[h:HAPPENS_IN]->(t:Tale {id:"<tale_id>"})
RETURN re, kr, t, h;

//display lemma for a token
MATCH (t:Token {text: "<token>"})-[r:LEMMATISIERT]->(l:Lemma)
RETURN l;

------------------------------------------------------

//display lemma for a token
MATCH (t:Token {text: 'Spieglein'})-[r:LEMMATISIERT]->(l:Lemma)
RETURN l